# Problem: 1351_무한 수열
# Date: 2025-07-11
# Language: Python 3

# 조건
# 무한 수열 A 정의 : 
# A0 = 1
# Ai = A_⌊i/P⌋ + A_⌊i/Q⌋ (i ≥ 1)
# N, P와 Q가 주어질 때, AN을 구하는 프로그램 

# 가정
# 첫째 줄: 3개의 정수 N, P, Q
# 0 ≤ N ≤ 10^12, 2 ≤ P, Q ≤ 10^9

# 출력 : A_N

# 아이디어 : 
# 뭔가 체계적이진 않지만 경험적으로 풀어온 문제들을 봤을 때..
# 이 문제는 N 값을 지정했을 때 N 값에 대해서 A_N = A_⌊N/P⌋ + A_⌊N/Q⌋ 이 두 가지로 나눌 수 있으니까
# 이를 재귀적으로 나누면서 메모이제이션만 할 수 있다면 빠르게 계산할 수 있지 않을가 생각함.


# 다만 메모이제이션 방법과 각 값 나눌 때 어떤 식으로 접근해야 하는지 잘 기억이 안남..


# 🔍 Q1. 이 문제에서 DP 배열로 풀 수 없는 이유는 무엇일까?

# 힌트:
# N의 범위: 최대 10^12
# 배열로 A[N]까지 저장하면 메모리 어떻게 될까?

# N의 범위가 매우 큰 건 알겠는데... 일반적인 dp 형태로 구성하지 못하고,  dp[N] = dp[N/P] + dp[N/Q] 식으로 구성된다면 가능하지 않나?
# 사실 dp 문제 잘 기억 안나서 어떻게 구성하는지 기본 양식 기억 안나긴 하는데.. 크게 문제 없어 보이는데..



# 🔍 Q2. 기본 재귀식 A[N] = A[N/P] + A[N/Q]로 풀면 어떤 문제가 발생할까?

# 힌트:

# N이 큰 경우 재귀 호출 몇 번 일어날까?
# 중복 계산이 발생하지 않을까?

# 만약 N값이 10^12 이고 P 와 Q가 10이라고 하면 적어도 각각에 대해서 11, 11 만큼 추가적으로 재귀 처리되니까 총 22번 내 처리되는 거 아닌가?
# 중복 계산이 존재하나? 잘 모르겠음


import sys
input = sys.stdin.readline

sys.setrecursionlimit(10**6)


N, P, Q = map(int, input().split())


memo = {0: 1}  # A[0] = 1

def A(i):
    if i in memo:
        return memo[i]
    memo[i] = A(i // P) + A(i // Q)
    return memo[i]


print(A(N))