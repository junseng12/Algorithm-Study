# Problem: 14501 퇴사
# Date: 2024-04-30
# Language: Python 3

# 조건 : 
# 남은 시간 N일(N+1일 째 상담원 퇴사) 내 최대한 많은 상담 일정 잡기
# 상담 완료 기간 Ti, 상담 금액 Pi (1 ≤ Ti ≤ 5, 1 ≤ Pi ≤ 1,000)
# 이 두 가지 요소를 고려하여 N (1 ≤ N ≤ 15) 값에 따른 최대 수익 값 구하기


# 가정 : 
#상담을 하는데 필요한 기간은 1일보다 클 수 있어서, 모든 상담을 할 수는 없다. 
# ex. 기간이 3인 1일에 있는 상담을 하게 되면, 2일, 3일에 있는 상담은 할 수 없게 된다. 
# N+1일째에는 회사에 없기 때문에, 상담 완료 기간이 퇴사일을 넘어서서는 안된다.


# 아이디어 :
# 상태 정의: dp[i] = i일에 시작했을 때 얻을 수 있는 최대 이익
# 점화식은 다음 중 어느 형태일까?

# Case 1: i일 상담을 한다면?
# → 다음 탐색은 어느 날부터? i + T[i]
# → 누적 이익은? P[i] + dp[i+Ti]

# Case 2: 상담을 안 한다면?
# → 다음 탐색은? i+1
# → 누적 이익은? dp[i+1]

# 최종적으로는? dp[i] = max(P[i] + dp[i + T[i]], dp[i + 1]) # 단, i + T[i] <= N 일 때만 유효

N = int(input())
T = []
P = []

dp = [0] * (N+1)

for _ in range(N):
    t, p = map(int, input().split())
    T.append(t)
    P.append(p)

for i in range(0, N):
  #해당일에 상담을 진행했을 경우
  if(i + T[i] <= N):
    dp[i + T[i]] = max(dp[i + T[i]], dp[i] + P[i])
    
  #해당일에 상담을 진행하지 않았을 경우 - 항상 다음날의 최대 이익 갱신 필요
  #왜냐면 "i일 이후에도 지금까지의 최대 이익은 이어지니까."
  dp[i + 1] = max(dp[i + 1], dp[i])
    
    
    
print(max(dp))